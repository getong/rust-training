/*
This file is auto generated by pgx.

The ordering of items is not stable, it is driven by a dependency graph.
*/

-- src/lib.rs:9
-- pgx_live::hello_pgx_live
CREATE FUNCTION "hello_pgx_live"() RETURNS text /* &str */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hello_pgx_live_wrapper';

-- src/lib.rs:14
-- pgx_live::my_generate_series
CREATE FUNCTION "my_generate_series"(
        "start" bigint, /* i64 */
        "end" bigint, /* i64 */
        "step" bigint DEFAULT 1 /* i64 */
) RETURNS SETOF bigint /* i64 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'my_generate_series_wrapper';

-- src/lib.rs:19
-- pgx_live::to_lowercase
CREATE FUNCTION "to_lowercase"(
        "s" text /* core::option::Option<alloc::string::String> */
) RETURNS text /* core::option::Option<alloc::string::String> */
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'to_lowercase_wrapper';

-- src/sortable_id.rs:17
-- pgx_live::sortable_id::SortableId
CREATE TYPE SortableId;

-- src/sortable_id.rs:17
-- pgx_live::sortable_id::sortableid_in
CREATE FUNCTION "sortableid_in"(
        "input" cstring /* &cstr_core::CStr */
) RETURNS SortableId /* pgx_live::sortable_id::SortableId */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortableid_in_wrapper';

-- src/sortable_id.rs:17
-- pgx_live::sortable_id::sortableid_out
CREATE FUNCTION "sortableid_out"(
        "input" SortableId /* pgx_live::sortable_id::SortableId */
) RETURNS cstring /* &cstr_core::CStr */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortableid_out_wrapper';

-- src/sortable_id.rs:17
-- pgx_live::sortable_id::SortableId
CREATE TYPE SortableId (
        INTERNALLENGTH = variable,
        INPUT = sortableid_in, /* pgx_live::sortable_id::sortableid_in */
        OUTPUT = sortableid_out, /* pgx_live::sortable_id::sortableid_out */
        STORAGE = extended
);

-- src/sortable_id.rs:19
-- pgx_live::sortable_id::sortableid_le
CREATE FUNCTION "sortableid_le"(
        "left" SortableId, /* pgx_live::sortable_id::SortableId */
        "right" SortableId /* pgx_live::sortable_id::SortableId */
) RETURNS bool /* bool */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortableid_le_wrapper';

-- src/sortable_id.rs:19
-- pgx_live::sortable_id::sortableid_le
CREATE OPERATOR <= (
        PROCEDURE="sortableid_le",
        LEFTARG=SortableId, /* pgx_live::sortable_id::SortableId */
        RIGHTARG=SortableId, /* pgx_live::sortable_id::SortableId */
        COMMUTATOR = >=,
        NEGATOR = >,
        RESTRICT = scalarlesel,
        JOIN = scalarlejoinsel
);

-- src/sortable_id.rs:18
-- pgx_live::sortable_id::sortableid_eq
CREATE FUNCTION "sortableid_eq"(
        "left" SortableId, /* pgx_live::sortable_id::SortableId */
        "right" SortableId /* pgx_live::sortable_id::SortableId */
) RETURNS bool /* bool */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortableid_eq_wrapper';

-- src/sortable_id.rs:18
-- pgx_live::sortable_id::sortableid_eq
CREATE OPERATOR = (
        PROCEDURE="sortableid_eq",
        LEFTARG=SortableId, /* pgx_live::sortable_id::SortableId */
        RIGHTARG=SortableId, /* pgx_live::sortable_id::SortableId */
        NEGATOR = <>,
        RESTRICT = eqsel,
        JOIN = eqjoinsel,
        HASHES,
        MERGES
);

-- src/sortable_id.rs:20
-- pgx_live::sortable_id::sortableid_hash
CREATE FUNCTION "sortableid_hash"(
        "value" SortableId /* pgx_live::sortable_id::SortableId */
) RETURNS integer /* i32 */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortableid_hash_wrapper';

-- src/sortable_id.rs:20
-- pgx_live::sortable_id::SortableId
CREATE OPERATOR FAMILY SortableId_hash_ops USING hash;
CREATE OPERATOR CLASS SortableId_hash_ops DEFAULT FOR TYPE SortableId USING hash FAMILY SortableId_hash_ops AS
        OPERATOR    1   =  (SortableId, SortableId),
        FUNCTION    1   sortableid_hash(SortableId);

-- src/sortable_id.rs:19
-- pgx_live::sortable_id::sortableid_ge
CREATE FUNCTION "sortableid_ge"(
        "left" SortableId, /* pgx_live::sortable_id::SortableId */
        "right" SortableId /* pgx_live::sortable_id::SortableId */
) RETURNS bool /* bool */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortableid_ge_wrapper';

-- src/sortable_id.rs:19
-- pgx_live::sortable_id::sortableid_ge
CREATE OPERATOR >= (
        PROCEDURE="sortableid_ge",
        LEFTARG=SortableId, /* pgx_live::sortable_id::SortableId */
        RIGHTARG=SortableId, /* pgx_live::sortable_id::SortableId */
        COMMUTATOR = <=,
        NEGATOR = <,
        RESTRICT = scalargesel,
        JOIN = scalargejoinsel
);

-- src/sortable_id.rs:19
-- pgx_live::sortable_id::sortableid_lt
CREATE FUNCTION "sortableid_lt"(
        "left" SortableId, /* pgx_live::sortable_id::SortableId */
        "right" SortableId /* pgx_live::sortable_id::SortableId */
) RETURNS bool /* bool */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortableid_lt_wrapper';

-- src/sortable_id.rs:19
-- pgx_live::sortable_id::sortableid_lt
CREATE OPERATOR < (
        PROCEDURE="sortableid_lt",
        LEFTARG=SortableId, /* pgx_live::sortable_id::SortableId */
        RIGHTARG=SortableId, /* pgx_live::sortable_id::SortableId */
        COMMUTATOR = >,
        NEGATOR = >=,
        RESTRICT = scalarltsel,
        JOIN = scalarltjoinsel
);

-- src/sortable_id.rs:18
-- pgx_live::sortable_id::sortableid_ne
CREATE FUNCTION "sortableid_ne"(
        "left" SortableId, /* pgx_live::sortable_id::SortableId */
        "right" SortableId /* pgx_live::sortable_id::SortableId */
) RETURNS bool /* bool */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortableid_ne_wrapper';

-- src/sortable_id.rs:18
-- pgx_live::sortable_id::sortableid_ne
CREATE OPERATOR <> (
        PROCEDURE="sortableid_ne",
        LEFTARG=SortableId, /* pgx_live::sortable_id::SortableId */
        RIGHTARG=SortableId, /* pgx_live::sortable_id::SortableId */
        NEGATOR = =,
        RESTRICT = neqsel,
        JOIN = neqjoinsel
);

-- src/sortable_id.rs:19
-- pgx_live::sortable_id::sortableid_cmp
CREATE FUNCTION "sortableid_cmp"(
        "left" SortableId, /* pgx_live::sortable_id::SortableId */
        "right" SortableId /* pgx_live::sortable_id::SortableId */
) RETURNS integer /* i32 */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortableid_cmp_wrapper';

-- src/sortable_id.rs:19
-- pgx_live::sortable_id::sortableid_gt
CREATE FUNCTION "sortableid_gt"(
        "left" SortableId, /* pgx_live::sortable_id::SortableId */
        "right" SortableId /* pgx_live::sortable_id::SortableId */
) RETURNS bool /* bool */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortableid_gt_wrapper';

-- src/sortable_id.rs:19
-- pgx_live::sortable_id::sortableid_gt
CREATE OPERATOR > (
        PROCEDURE="sortableid_gt",
        LEFTARG=SortableId, /* pgx_live::sortable_id::SortableId */
        RIGHTARG=SortableId, /* pgx_live::sortable_id::SortableId */
        COMMUTATOR = <,
        NEGATOR = <=,
        RESTRICT = scalargtsel,
        JOIN = scalargtjoinsel
);

-- src/sortable_id.rs:19
-- pgx_live::sortable_id::SortableId
CREATE OPERATOR FAMILY SortableId_btree_ops USING btree;
CREATE OPERATOR CLASS SortableId_btree_ops DEFAULT FOR TYPE SortableId USING btree FAMILY SortableId_btree_ops AS
        OPERATOR 1 <,
        OPERATOR 2 <=,
        OPERATOR 3 =,
        OPERATOR 4 >=,
        OPERATOR 5 >,
        FUNCTION 1 sortableid_cmp(SortableId, SortableId);

-- src/sortable_id.rs:51
-- pgx_live::sortable_id::generate_sortable_id
CREATE FUNCTION "generate_sortable_id"() RETURNS SortableId /* pgx_live::sortable_id::SortableId */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'generate_sortable_id_wrapper';
